
from . import load
from .util import varname
from .cast import *
from .textast import VSpace

ctypes = {
    load.Int: 'long',
    load.UInt: 'size_t',
    load.Float: 'double',
    load.Bool: 'int',
    }
ctypenames = {
    load.String: 'string',
    }
ctypenames.update(ctypes)
string_types = (load.File, load.String, load.Dir)

def ctypename(typ):
    if isinstance(typ, load.Struct):
        return typ.type
    return ctypenames[typ.__class__]

class GenHCode(object):

    def __init__(self, cfg):
        self.cfg = cfg
        self.prefix = self.cfg.name
        self._visited = set()

    def make(self, ast):
        ast(CommentBlock(
            'THIS IS AUTOGENERATED FILE',
            'DO NOT EDIT!!!',
            ))
        ast(StdInclude('coyaml_hdr.h'))
        ast(VSpace())
        for sname, struct in self.cfg.types.items():
            cname = self.prefix+'_'+sname
            with ast(TypeDef(Struct(cname+'_s', ast.block()),
                cname+'_t')) as s:
                self._struct_body(s, struct.members, root=ast)
            ast(VSpace())
        with ast(TypeDef(Struct(self.prefix+'_main_s', ast.block()),
            self.prefix+'_main_t')) as ms:
            self._struct_body(ms, self.cfg.data, root=ast)
        ast(VSpace())
        ast(Var(Typename('coyaml_cmdline_t'), self.prefix+'_cmdline'))
        ast(Func(Typename('bool'), self.prefix+'_readfile', [
            Param(Typename('char *'), 'filename'),
            Param(Typename(self.prefix+'_main_t *'), 'filename'),
            Param(Typename('bool'), 'debug'),
            ]))
        ast(Func(Typename(self.prefix+'_main_t *'), self.prefix+'_init', [
            Param(Typename(self.prefix+'_main_t *'), 'target'),
            ]))
        ast(Func(Void(), self.prefix+'_free', [
            Param(Typename(self.prefix+'_main_t *'), 'target'),
            ]))
        ast(Func(Typename(self.prefix+'_main_t *'), self.prefix+'_load', [
            Param(Typename(self.prefix+'_main_t *'), 'target'),
            Param(Typename('int'), 'argc'),
            Param(Typename('char **'), 'argv'),
            ]))

    def _simple_type(self, ast, typ, name):
        if isinstance(typ, load.Struct):
            ast(Var(Typename(self.prefix+'_'+typ.type+'_t'), varname(name)))
        elif isinstance(typ, string_types):
            ast(Var(Typename('char *'), varname(name)))
            ast(Var(Typename('size_t'), varname(name)+'_len'))
        else:
            ast(Var(Typename(ctypes[typ.__class__]), varname(name)))

    def _struct_body(self, ast, dic, root):
        for k, v in dic.items():
            if isinstance(v, dict):
                with ast(Var(AnonStruct(ast.block()), k)) as ss:
                    self._struct_body(ss, v, root=root)
            elif isinstance(v, load.Mapping):
                tname = '{0}_m_{1}_{2}'.format(self.prefix,
                    ctypename(v.key_element), ctypename(v.value_element))
                ast(Var(Typename('struct '+tname+'_s *'), varname(k)))
                ast(Var('size_t', varname(k)+'_len'))
                if tname in self._visited:
                    continue
                self._visited.add(tname)
                root(VSpace())
                with root(TypeDef(Struct(tname+'_s', ast.block()),
                    tname+'_t')) as sub:
                    sub(Var(Typename('struct '+tname+'_s *'), 'next'))
                    self._simple_type(sub, v.key_element, 'key')
                    self._simple_type(sub, v.value_element, 'value')
            elif isinstance(v, load.Array):
                tname = '{0}_a_{1}'.format(self.prefix,
                    ctypename(v.element))
                ast(Var(Typename('struct '+tname+'_s *'), varname(k)))
                ast(Var('size_t', varname(k)+'_len'))
                if tname in self._visited:
                    continue
                self._visited.add(tname)
                root(VSpace())
                with root(TypeDef(Struct(tname+'_s', ast.block()),
                    tname+'_t')) as sub:
                    sub(Var(Typename('struct '+tname+'_s *'), 'next'))
                    self._simple_type(sub, v.element, 'value')
            else:
                self._simple_type(ast, v, k)

def main():
    from .cli import simple
    from .load import load
    from .textast import Ast
    cfg, inp, opt = simple()
    with inp:
        load(inp, cfg)
    generator = GenHCode(cfg)
    ast = Ast()
    generator.make(ast)
    print(str(ast))

if __name__ == '__main__':
    from .hgen import main
    main()
