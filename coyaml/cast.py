import re
from .textast import Node, VSpace, CList, lazy, Ast
from collections import OrderedDict

__ast__ = [
    'Ident',
    'Typename',
    'CommentBlock',
    'StdInclude',
    'Var',
    'Struct',
    'TypeDef',
    ]

class Ident(Node):
    __slots__ = OrderedDict([
        ('value', str),
        ])
    re_ident = re.compile('^[a-zA-Z_][0-9a-zA-Z_]*$')
    def __init__(self, value):
        assert self.re_ident.match(value), value
        self.value = value

class Typename(Node):
    __slots__ = OrderedDict([
        ('value', str),
        ])
    re_typename = re.compile('''^
        (?:(?:const|static)\s+)?
        (?:(?:unsigned|signed)\s+)?
        (?:char|short|int|long|bool|float|double|\w+_t)
        \s*(?:\*\s*)* |
        struct\s+\w+
        \s*(?:\*\s*)*
        $''', re.X)
    def __init__(self, value):
        super(Typename, self).__init__(value)
        assert self.re_typename.match(self.value), self.value

_type = (Typename, lazy.Struct, lazy.AnonStruct)

class CommentBlock(Node):
    __slots__ = OrderedDict([
        ('lines', CList(str)),
        ])
    top = True
    each_line = '/* {0:s} */'

    def __init__(self, *lines):
        super(CommentBlock, self).__init__(lines)

class StdInclude(Node):
    __slots__ = OrderedDict([
        ('filename', str),
        ])
    top = True
    line_format = '#include <{filename}>'

class Var(Node):
    __slots__ = OrderedDict([
        ('type', _type),
        ('name', Ident),
        ])
    top = True
    line_format = '{type} {name};'

class Struct(Node):
    __slots__ = OrderedDict([
        ('name', Ident),
        ('body', CList(Var)),
        ])
    top = True
    block_start = 'struct {name} {{'
    block_end = '}}'

class AnonStruct(Node):
    __slots__ = OrderedDict([
        ('body', CList(Var)),
        ])
    top = True
    block_start = 'struct {{'
    block_end = '}}'

class TypeDef(Node):
    __slots__ = OrderedDict([
        ('definition', _type),
        ('name', Ident),
        ])
    top = True
    line_format = 'typedef {definition} {name};'

lazy.fix(globals())

if __name__ == '__main__':
    def sample(ast):
        ast(CommentBlock(
            "THIS IS AUTOGENERATED FILE",
            "DO NOT EDIT!!!",
            ))
        ast(StdInclude('coyaml_hdr.h'))
        ast(VSpace())
        with ast(TypeDef(Struct('test_s', ast.block()),'test_t')) as ch:
            ch(Var(Typename('int'), 'intval'))
            ch(Var(Typename('unsigned long'), 'longval'))
            ch(Var(Typename('const char *'), 'stringval'))
    print(str(Ast(sample)))
